package ua.com.codefire.se.basicp2pchat;

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import ua.com.codefire.se.basicp2pchat.net.ChatMessageListener;
import ua.com.codefire.se.basicp2pchat.net.ChatSocketClient;
import ua.com.codefire.se.basicp2pchat.net.ChatSocketServer;
import ua.com.codefire.se.basicp2pchat.net.utils.AddressUtil;

/**
 *
 * @author human
 */
public class ChatFrame extends javax.swing.JFrame implements ChatMessageListener {

    private String selfAddress;

    /**
     * Creates new form ChatFrame
     *
     * @throws java.net.UnknownHostException
     */
    public ChatFrame() throws UnknownHostException {
        this.selfAddress = AddressUtil.getLocalHostLANAddress().getHostAddress();
        
        initComponents();
        
        setTitle(String.format("P2P Client (%s)", selfAddress));
        jtaMessage.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaHistory = new javax.swing.JTextArea();
        jtfIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaMessage = new javax.swing.JTextArea();
        jbSend = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("P2P Chat");
        setResizable(false);

        jtaHistory.setEditable(false);
        jtaHistory.setColumns(20);
        jtaHistory.setLineWrap(true);
        jtaHistory.setRows(5);
        jtaHistory.setFocusable(false);
        jScrollPane1.setViewportView(jtaHistory);

        jtfIP.setText("localhost");

        jLabel1.setText("Client IP:");

        jtaMessage.setColumns(20);
        jtaMessage.setRows(5);
        jtaMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtaMessageKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtaMessage);

        jbSend.setText("SEND");
        jbSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSendActionPerformed(evt);
            }
        });

        jLabel2.setText("[Ctrl + Enter]  - for send message.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfIP))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSend)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSend)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSendActionPerformed
        ChatSocketClient client = new ChatSocketClient(jtfIP.getText(), 5445);

        String message = jtaMessage.getText();

        client.sendMessage(selfAddress, message);
        appendHistory("I'm", message);

        jtaMessage.setText("");
    }//GEN-LAST:event_jbSendActionPerformed

    private void jtaMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaMessageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && evt.isControlDown()) {
            evt.consume();
            jbSendActionPerformed(null);
        }
    }//GEN-LAST:event_jtaMessageKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        ChatSocketServer server = new ChatSocketServer(5445);

        java.awt.EventQueue.invokeLater(() -> {
            try {
                ChatFrame chatFrame = new ChatFrame();
                chatFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent evt) {
                        try {
                            server.stop();
                        } catch (IOException ex) {
                            Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
                chatFrame.setVisible(true);
                
                server.addListener(chatFrame);
                server.listen();
            } catch (IllegalThreadStateException | IOException ex) {
                Logger.getLogger(ChatFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbSend;
    private javax.swing.JTextArea jtaHistory;
    private javax.swing.JTextArea jtaMessage;
    private javax.swing.JTextField jtfIP;
    // End of variables declaration//GEN-END:variables

    @Override
    public void incomingMessage(String address, String message) {
        appendHistory(address, message);
    }

    private void appendHistory(String address, String message) {
        jtaHistory.append(String.format("%s [%s]:\n   %s\n", address, SimpleDateFormat.getTimeInstance().format(new Date()), message));
    }
}
